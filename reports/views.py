from django.shortcuts import render
from rest_framework.views import APIView
from rest_framework.response import Response
from .permissions import IsRoleAdmin
import logging
from .utils import ComplaintStatusCount,avg_resolution_time,subscription_stats
from rest_framework import status


class ReportView(APIView):
    permission_classes = [IsRoleAdmin]
    logger = logging.getLogger('django')

    def get(self, request):
        """
        Handles GET requests to generate a report.
        Logs the report generation event and returns a report JSON.
        Any errors are returned as JSON instead of HTML.
        """
        try:
            # Log report generation
            self.logger.info(f"Report generated by admin user: {request.user.username}")

            # Generate report data
            report_data = {
                "complaint_status_counts": ComplaintStatusCount(),
                "average_resolution_time": avg_resolution_time(),
                "subscription_statistics": subscription_stats(),
            }

            return Response(report_data, status=status.HTTP_200_OK)

        except KeyError as e:
            self.logger.error(f"KeyError in report generation: {str(e)}")
            return Response(
                {"error": f"Missing key: {str(e)}"},
                status=status.HTTP_400_BAD_REQUEST
            )

        except Exception as e:
            self.logger.error(f"Unexpected error in report generation: {str(e)}")
            return Response(
                {"error": "An unexpected error occurred.", "details": str(e)},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
